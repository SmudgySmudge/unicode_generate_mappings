import os

# Generate mappings for Chinese characters (basic range) and Cyrillic characters
unicode_mappings = {}

# Map basic Chinese characters (U+4E00 to U+9FFF)
for codepoint in range(0x4E00, 0x9FFF + 1):
    unicode_sequence = f"\\u{codepoint:04x}"
    character = chr(codepoint)
    unicode_mappings[unicode_sequence] = character

# Map basic Cyrillic characters (U+0400 to U+04FF)
for codepoint in range(0x0400, 0x04FF + 1):
    unicode_sequence = f"\\u{codepoint:04x}"
    character = chr(codepoint)
    unicode_mappings[unicode_sequence] = character

# Map supplemental Cyrillic characters (U+0500 to U+052F)
for codepoint in range(0x0500, 0x052F + 1):
    unicode_sequence = f"\\u{codepoint:04x}"
    character = chr(codepoint)
    unicode_mappings[unicode_sequence] = character

# Map Korean Hangul Syllables (U+AC00 to U+D7A3)
for codepoint in range(0xAC00, 0xD7A3 + 1):
    unicode_sequence = f"\\u{codepoint:04x}"
    character = chr(codepoint)
    unicode_mappings[unicode_sequence] = character

# Map Hiragana (U+3040 to U+309F)
for codepoint in range(0x3040, 0x309F + 1):
    unicode_sequence = f"\\u{codepoint:04x}"
    character = chr(codepoint)
    unicode_mappings[unicode_sequence] = character

# Map Katakana (U+30A0 to U+30FF)
for codepoint in range(0x30A0, 0x30FF + 1):
    unicode_sequence = f"\\u{codepoint:04x}"
    character = chr(codepoint)
    unicode_mappings[unicode_sequence] = character

# Map Katakana Phonetic Extensions (U+31F0 to U+31FF)
for codepoint in range(0x31F0, 0x31FF + 1):
    unicode_sequence = f"\\u{codepoint:04x}"
    character = chr(codepoint)
    unicode_mappings[unicode_sequence] = character

# Map CJK Unified Ideographs (Common Kanji - U+4E00 to U+9FFF)
for codepoint in range(0x4E00, 0x9FFF + 1):
    unicode_sequence = f"\\u{codepoint:04x}"
    character = chr(codepoint)
    unicode_mappings[unicode_sequence] = character

# Generate Splunk eval
splunk_eval = '| eval device_display_name = '
replace_chain = "replace(device_display_name"

for k, v in unicode_mappings.items():
    replace_chain = f'replace({replace_chain}, "\\\\\\{k[1:]}", "{v}")'

splunk_eval += replace_chain + ')'

# Define the file name in the same directory
file_name = "splunk_eval_statement.txt"
file_path = os.path.join(os.getcwd(), file_name)  # Save in the same directory as the script

# Write the Splunk eval statement to the file
with open(file_path, "w", encoding="utf-8") as file:
    file.write(splunk_eval)

# Print a confirmation message without using f-string
print("Splunk eval statement saved to: " + file_path)
